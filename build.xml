<?xml version="1.0"?>

<project name="${name}" default="runtime" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

 <!-- Load all the default properties, and any the user wants -->
 <!-- to contribute (without having to type -D or edit this file -->
 <property file="${user.home}/build.properties" />
 <property file="${basedir}/build.properties" />
 <property file="${basedir}/default.properties" />
 <property name="test.junit.output.format" value="plain" />
 <property name="release.dir" value="${build.dir}/release" />

 <!-- define Maven coordinates, repository url and artifacts name etc -->
 <property name="groupId" value="tw.com.ruten.ts.mapreduce" />
 <property name="artifactId" value="MRSimpleCode" />
 <property name="maven-repository-url" value="https://repository.apache.org/service/local/staging/deploy/maven2" />
 <property name="maven-repository-id" value="apache.releases.https" />
 <property name="maven-jar" value="${release.dir}/${artifactId}-${version}.jar" />
 <property name="maven-javadoc-jar" value="${release.dir}/${artifactId}-${version}-javadoc.jar" />
 <property name="maven-sources-jar" value="${release.dir}/${artifactId}-${version}-sources.jar" />


 <!-- the normal classpath -->
 <path id="classpath">
	<pathelement location="${build.classes}" />
	<fileset dir="${build.lib.dir}">
	 <include name="*.jar" />
	</fileset>
 </path>

 <presetdef name="javac">
	 <javac includeantruntime="false" />
 </presetdef>

 <!-- the unit test classpath -->
 <dirname property="plugins.classpath.dir" file="${build.plugins}" />
 <path id="test.classpath">
	<pathelement location="${test.build.classes}" />
	<pathelement location="${conf.dir}" />
	<pathelement location="${test.src.dir}" />
	<pathelement location="${plugins.classpath.dir}" />
	<path refid="classpath" />
	<pathelement location="${build.dir}/${final.name}.job" />
	<fileset dir="${build.lib.dir}">
	 <include name="*.jar" />
	</fileset>
 </path>

 <!-- ====================================================== -->
 <!-- Stuff needed by all targets -->
 <!-- ====================================================== -->
 <target name="init" depends="ivy-init" description="--> stuff required by all targets">
	<mkdir dir="${build.dir}" />
	<mkdir dir="${build.classes}" />
	<mkdir dir="${release.dir}" />
	<mkdir dir="lib/native" />
	<mkdir dir="${test.build.dir}" />
	<mkdir dir="${test.build.classes}" />

	<touch datetime="01/25/1971 2:00 pm">
	 <fileset dir="${conf.dir}" includes="**/*.template" />
	</touch>

	<copy todir="${conf.dir}" verbose="true">
	 <fileset dir="${conf.dir}" includes="**/*.template" />
	 <mapper type="glob" from="*.template" to="*" />
	</copy>
 </target>

 <!-- ====================================================== -->
 <!-- Compile the Java files -->
 <!-- ====================================================== -->
 <target name="compile-core" depends="init, resolve-default" description="--> compile core Java files only">
	<javac 
		encoding="${build.encoding}" 
		srcdir="${src.dir}"
		destdir="${build.classes}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}" 
		target="${javac.version}"
		source="${javac.version}" 
		deprecation="${javac.deprecation}">
	 <compilerarg value="-Xlint:-path"/>
	 <classpath refid="classpath" />
	</javac>
	<copy todir="${build.classes}">
	 <fileset dir="${src.dir}" includes="**/*.html" />
	 <fileset dir="${src.dir}" includes="**/*.css" />
	 <fileset dir="${src.dir}" includes="**/*.properties" />
	</copy>
 </target>

 <!-- ================================================================== -->
 <!-- Make jar -->
 <!-- ================================================================== -->
 <!-- -->
 <!-- ================================================================== -->
 <target name="jar" depends="compile-core" description="--> make jar">
	<copy file="${conf.dir}/job-default.xml" todir="${build.classes}" />
	<copy file="${conf.dir}/job-site.xml" todir="${build.classes}" />
	<jar jarfile="${build.dir}/${final.name}.jar" basedir="${build.classes}">
	 <manifest>
	 </manifest>
	</jar>
 </target>

 <!-- ================================================================== -->
 <!-- Make Maven Central Release -->
 <!-- ================================================================== -->
 <!-- -->
 <!-- ================================================================== -->
 <target name="release" depends="compile-core"
	description="--> generate the release distribution">
	<copy file="${conf.dir}/job-default.xml" todir="${build.classes}" />
	<copy file="${conf.dir}/job-site.xml" todir="${build.classes}" />

	<!-- build the main artifact -->
	<jar jarfile="${maven-jar}" basedir="${build.classes}" />

	<fail message="Unsupported Java version: ${java.version}. Javadoc requires Java version 7u25 or greater. ">
		<condition>
			<or>
				<matches string="${java.version}" pattern="1.7.0_2[01234].+" casesensitive="false" /> 
				<matches string="${java.version}" pattern="1.7.0_1.+" casesensitive="false" /> 
				<equals arg1="${ant.java.version}" arg2="1.6" />
				<equals arg1="${ant.java.version}" arg2="1.5" /> 
			</or>
		</condition>
	</fail>


	<jar jarfile="${maven-javadoc-jar}">
	 <fileset dir="${release.dir}/javadoc" />
	</jar>

	<!-- build the sources artifact -->
	<jar jarfile="${maven-sources-jar}">
	 <fileset dir="${src.dir}" />
	</jar>
 </target>

 <!-- ================================================================== -->
 <!-- Deploy to Apache Nexus -->
 <!-- ================================================================== -->
 <!-- -->
 <!-- ================================================================== -->
 <target name="deploy" depends="release" description="--> deploy to Apache Nexus">

	<!-- generate a pom file -->
	<ivy:makepom ivyfile="${ivy.file}" pomfile="${basedir}/pom.xml"
	 templatefile="ivy/mvn.template">
	 <mapping conf="default" scope="compile" />
	 <mapping conf="runtime" scope="runtime" />
	</ivy:makepom>

	<!-- sign and deploy the main artifact -->
	<artifact:mvn>
	 <arg
		value="org.apache.maven.plugins:maven-gpg-plugin:1.4:sign-and-deploy-file" />
	 <arg value="-Durl=${maven-repository-url}" />
	 <arg value="-DrepositoryId=${maven-repository-id}" />
	 <arg value="-DpomFile=pom.xml" />
	 <arg value="-Dfile=${maven-jar}" />
	 <arg value="-Papache-release" />
	</artifact:mvn>

	<!-- sign and deploy the sources artifact -->
	<artifact:mvn>
	 <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.4:sign-and-deploy-file" />
	 <arg value="-Durl=${maven-repository-url}" />
	 <arg value="-DrepositoryId=${maven-repository-id}" />
	 <arg value="-DpomFile=pom.xml" />
	 <arg value="-Dfile=${maven-sources-jar}" />
	 <arg value="-Dclassifier=sources" />
	 <arg value="-Papache-release" />
	</artifact:mvn>

	<!-- sign and deploy the javadoc artifact -->
	<artifact:mvn>
	 <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.4:sign-and-deploy-file" />
	 <arg value="-Durl=${maven-repository-url}" />
	 <arg value="-DrepositoryId=${maven-repository-id}" />
	 <arg value="-DpomFile=pom.xml" />
	 <arg value="-Dfile=${maven-javadoc-jar}" />
	 <arg value="-Dclassifier=javadoc" />
	 <arg value="-Papache-release" />
	</artifact:mvn>
 </target>

 <!-- ================================================================== -->
 <!-- Make job jar -->
 <!-- ================================================================== -->
 <!-- -->
 <!-- ================================================================== -->
 <target name="job" depends="compile-core" description="--> make job">
	<jar jarfile="${build.dir}/${final.name}.job">
	 <!-- 
	 If the build.classes has the config files because the jar command 
	 command has run, exclude them. The conf directory has them. 
	 -->
	 <zipfileset dir="${build.classes}" excludes="job-default.xml,job-site.xml" />
	 <zipfileset dir="${conf.dir}" excludes="*.template,hadoop*.*" />
	 <!-- 
	 need to exclude hsqldb.jar due to a conflicting version already present 
	 in Hadoop/lib. 
	 -->
	 <zipfileset dir="${build.lib.dir}" prefix="lib" includes="**/*.jar"
		excludes="jasper*.jar,jsp-*.jar,hadoop-*.jar,hbase*test*.jar,ant*jar,hsqldb*.jar,slf4j*.jar,log4j*.jar" />
	</jar>
 </target>

 <target name="runtime" depends="jar, job" description="--> depoly">
	<mkdir dir="${runtime.dir}" />
	<mkdir dir="${runtime.local}" />
	<mkdir dir="${runtime.deploy}" />
	<!-- deploy area -->
	<copy file="${build.dir}/${final.name}.job" todir="${runtime.deploy}" />

	<!-- local area -->
	<copy file="${build.dir}/${final.name}.jar" todir="${runtime.local}/lib" failonerror="false"/>
	<copy todir="${runtime.local}/lib/native" failonerror="false">
	 <fileset dir="lib/native" />
	</copy>
	<copy todir="${runtime.local}/conf">
	 <fileset dir="${conf.dir}" excludes="*.template" />
	</copy>
	<copy todir="${runtime.local}/lib" failonerror="false">
	 <fileset dir="${build.dir}/lib"
		excludes="ant*.jar,jasper*.jar,jsp-*.jar,hadoop*test*.jar,hbase*test*.jar" />
	</copy>
	<copy todir="${runtime.local}/test">
	 <fileset dir="${build.dir}/test" />
	</copy>
 </target>

 <!-- ================================================================== -->
 <!-- Compile test code -->
 <!-- ================================================================== -->
 <target name="compile-core-test" depends="compile-core, resolve-test" description="--> compile test code">
	<javac 
		encoding="${build.encoding}" 
		srcdir="${test.src.dir}"
		destdir="${test.build.classes}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}" 
		target="${javac.version}"
		source="${javac.version}" 
		deprecation="${javac.deprecation}">
	 <compilerarg value="-Xlint:-path"/>
	 <classpath refid="test.classpath" />
	</javac>
 </target>

 <!-- ================================================================== -->
 <!-- Run unit tests -->
 <!-- ================================================================== -->
 <target name="test-core" depends="job, compile-core-test" description="--> run JUnit tests only">

	<delete dir="${test.build.data}" />
	<mkdir dir="${test.build.data}" />
	<!-- 
	copy resources needed in junit tests 
	-->
	<copy todir="${test.build.data}">
	 <fileset dir="src/testresources" includes="**/*" />
	</copy>
	<copy file="${test.src.dir}/log4j.properties" 
		todir="${test.build.classes}" />
		
	<copy file="${test.src.dir}/gora.properties" 
		todir="${test.build.classes}" />

	<copy file="${test.src.dir}/crawl-tests.xml"
				todir="${test.build.classes}"/>
				
	<copy file="${test.src.dir}/domain-urlfilter.txt"
				todir="${test.build.classes}"/>

	<copy file="${test.src.dir}/filter-all.txt"
				todir="${test.build.classes}"/>

	<junit printsummary="yes" haltonfailure="no" fork="yes" dir="${basedir}"
	 errorProperty="tests.failed" failureProperty="tests.failed" maxmemory="1000m">
	 <sysproperty key="test.build.data" value="${test.build.data}" />
	 <sysproperty key="test.src.dir" value="${test.src.dir}" />
	 <sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl" />
	 <classpath refid="test.classpath" />
	 <formatter type="${test.junit.output.format}" />
	 <batchtest todir="${test.build.dir}" unless="testcase">
		<fileset dir="${test.src.dir}" 
			includes="**/Test*.java" excludes="**/${test.exclude}.java" />
	 </batchtest>
	 <batchtest todir="${test.build.dir}" if="testcase">
		<fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
	 </batchtest>
	</junit>

	<fail if="tests.failed">Tests failed!</fail>

 </target>


 <!-- ================================================================== -->
 <!-- Ivy targets -->
 <!-- ================================================================== -->

 <!-- target: resolve ================================================= -->
 <target name="resolve-default" depends="clean-lib, init" description="--> resolve and retrieve dependencies with ivy">
	<ivy:resolve file="${ivy.file}" conf="default" log="download-only" />
	<ivy:retrieve pattern="${build.lib.dir}/[artifact]-[revision].[ext]" symlink="false" log="quiet" />
	<antcall target="copy-libs" />
 </target>

 <target name="resolve-test" depends="clean-lib, init" description="--> resolve and retrieve dependencies with ivy">
	<ivy:resolve file="${ivy.file}" conf="test" log="download-only" />
	<ivy:retrieve pattern="${build.lib.dir}/[artifact]-[revision].[ext]" symlink="false" log="quiet" />
	<antcall target="copy-libs" />
 </target>

 <target name="copy-libs" description="--> copy the libs in lib, which are not ivy enabled">
	<!-- copy the libs in lib, which are not ivy enabled -->
	<copy todir="${build.lib.dir}/" failonerror="false">
	 <fileset dir="${lib.dir}" includes="**/*.jar" />
	</copy>
 </target>

 <!-- target: publish-local =========================================== -->
 <target name="publish-local" depends="jar" description="--> publish this project in the local ivy repository">
	<ivy:publish artifactspattern="${build.dir}/[artifact]-${version}.[ext]"
		resolver="local" 
		pubrevision="${version}" 
		pubdate="${now}" 
		status="integration"
		forcedeliver="true" overwrite="true" />
	<echo message="project ${ant.project.name} published locally with version ${version}" />
 </target>

 <!-- target: report ================================================== -->
 <target name="report" depends="resolve-test" description="--> generates a report of dependencies">
	<ivy:report todir="${build.dir}" />
 </target>

 <!-- target: ivy-init ================================================ -->
 <target name="ivy-init" depends="ivy-probe-antlib, ivy-init-antlib" description="--> initialise Ivy settings">
	<ivy:settings file="${ivy.dir}/ivysettings.xml" />
 </target>

 <!-- target: ivy-probe-antlib ======================================== -->
 <target name="ivy-probe-antlib" description="--> probe the antlib library">
	<condition property="ivy.found">
	 <typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
	</condition>
 </target>

 <!-- target: ivy-download ============================================ -->
 <target name="ivy-download" description="--> download ivy">
	<available file="${ivy.jar}" property="ivy.jar.found" />
	<antcall target="ivy-download-unchecked" />
 </target>

 <!-- target: ivy-download-unchecked ================================== -->
 <target name="ivy-download-unchecked" unless="ivy.jar.found" description="--> fetch any ivy file">
	<get src="${ivy.repo.url}" dest="${ivy.jar}" usetimestamp="true" />
 </target>

 <!-- target: ivy-init-antlib ========================================= -->
 <target name="ivy-init-antlib" depends="ivy-download" unless="ivy.found" description="--> attempt to use Ivy with Antlib">
	<typedef uri="antlib:org.apache.ivy.ant" onerror="fail"
	 loaderRef="ivyLoader">
	 <classpath>
		<pathelement location="${ivy.jar}" />
	 </classpath>
	</typedef>
	<fail>
	 <condition>
		<not>
		 <typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
		</not>
	 </condition>
	 You need Apache Ivy 2.0 or later from http://ant.apache.org/
	 It could not be loaded from ${ivy.repo.url}
	</fail>
 </target>

	<!-- ================================================================== -->
	<!-- Make bin release zip																							 -->
	<!-- ================================================================== -->
	<!--
	<target name="zip-bin" depends="package-bin" description="generate bin.zip distribution package">
	 <zip compress="true" casesensitive="yes" 
		 destfile="${bin.dist.version.dir}.zip">
	 <zipfileset dir="${bin.dist.version.dir}" filemode="664" prefix="${final.name}">
			 <exclude name="bin/*" />
			 <include name="**" />
	 </zipfileset>
	 <zipfileset dir="${bin.dist.version.dir}" filemode="755" prefix="${final.name}">
			 <include name="bin/*" />
	 </zipfileset>
	 </zip>
	</target>
	-->
 <!-- ================================================================== -->
 <!-- Clean. Delete the build files, and their directories -->
 <!-- ================================================================== -->

 <!-- target: clean =================================================== -->
 <target name="clean" depends="clean-build, clean-lib, clean-dist, clean-runtime" description="--> clean the project" />

 <!-- target: clean-local ============================================= -->
 <target name="clean-local" depends="" description="--> cleans the local repository for the current module">
	<delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}" />
 </target>

 <!-- target: clean-lib =============================================== -->
 <target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
	<delete includeemptydirs="true" dir="${build.lib.dir}" />
 </target>

 <!-- target: clean-build ============================================= -->
 <target name="clean-build" description="--> clean the project built files">
	<delete includeemptydirs="true" dir="${build.dir}" />
 </target>

 <!-- target: clean-dist ============================================= -->
 <target name="clean-dist" description="--> clean the project dist files">
	<delete includeemptydirs="true" dir="${dist.dir}" />
 </target>

 <!-- target: clean-cache ============================================= -->
 <target name="clean-cache" depends="" description="--> delete ivy cache">
	<ivy:cleancache />
 </target>

 <target name="clean-runtime" description="--> clean the project runtime area">
	<delete includeemptydirs="true" dir="${runtime.dir}" />
 </target>

 <target name="git-version" depends="init" description="--> get the git version">
 	<exec executable="git" failonerror="true" resultproperty="get.exit.code" output="build/classes/.version">
        <arg value="log" />
        <arg value="--pretty=format:'%H'" />
        <arg value="-1" />
	</exec>
 	<echo message="Git Status: ${get.exit.code}" />
 	<loadfile srcFile=".version" property="core.version" />
 	<echo message="Core Version: ${core.version}" />
 </target>
	
	
	
</project>
